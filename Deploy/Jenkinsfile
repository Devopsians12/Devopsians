pipeline {
    agent any

    environment {
        DOCKERHUB_CREDENTIALS = credentials('dockerhub-credentials')
        DOCKERHUB_USERNAME = 'mohamedtarek123'
        BACKEND_IMAGE = 'devopsians-backend'
        FRONTEND_IMAGE = 'devopsians-frontend'
        IMAGE_TAG = "${BUILD_NUMBER}"
        EC2_HOST = '56.228.11.117'
        EC2_USER = 'ubuntu'
        SSH_KEY = credentials('ec2-ssh-key')
        FRONTEND_URL = "http://${EC2_HOST}"
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Build images on EC2') {
            steps {
                script {
                    withCredentials([
                        sshUserPrivateKey(credentialsId: 'ec2-ssh-key', keyFileVariable: 'SSH_KEY_FILE'),
                        usernamePassword(credentialsId: 'dockerhub-credentials', usernameVariable: 'DOCKERHUB_USER', passwordVariable: 'DOCKERHUB_PASS')
                    ]) {
                        // Create build directory and upload source code to EC2
                        bat '"C:\\Program Files\\Git\\usr\\bin\\ssh.exe" -i "%SSH_KEY_FILE%" -o StrictHostKeyChecking=no %EC2_USER%@%EC2_HOST% "mkdir -p /home/%EC2_USER%/devopsians-build"'
                        bat '"C:\\Program Files\\Git\\usr\\bin\\scp.exe" -i "%SSH_KEY_FILE%" -o StrictHostKeyChecking=no -r . %EC2_USER%@%EC2_HOST%:/home/%EC2_USER%/devopsians-build/'
                        
                        // Build images on EC2
                        bat '"C:\\Program Files\\Git\\usr\\bin\\ssh.exe" -i "%SSH_KEY_FILE%" -o StrictHostKeyChecking=no %EC2_USER%@%EC2_HOST% "cd /home/%EC2_USER%/devopsians-build && docker build -t %DOCKERHUB_USERNAME%/%BACKEND_IMAGE%:%IMAGE_TAG% -f backend/Dockerfile . && docker tag %DOCKERHUB_USERNAME%/%BACKEND_IMAGE%:%IMAGE_TAG% %DOCKERHUB_USERNAME%/%BACKEND_IMAGE%:latest"'
                        
                        bat '"C:\\Program Files\\Git\\usr\\bin\\ssh.exe" -i "%SSH_KEY_FILE%" -o StrictHostKeyChecking=no %EC2_USER%@%EC2_HOST% "cd /home/%EC2_USER%/devopsians-build && docker build -t %DOCKERHUB_USERNAME%/%FRONTEND_IMAGE%:%IMAGE_TAG% -f frontend/Dockerfile --build-arg VITE_API_URL=http://%EC2_HOST%:3030 . && docker tag %DOCKERHUB_USERNAME%/%FRONTEND_IMAGE%:%IMAGE_TAG% %DOCKERHUB_USERNAME%/%FRONTEND_IMAGE%:latest"'
                        
                        // Login and push from EC2
                        bat '"C:\\Program Files\\Git\\usr\\bin\\ssh.exe" -i "%SSH_KEY_FILE%" -o StrictHostKeyChecking=no %EC2_USER%@%EC2_HOST% "echo %DOCKERHUB_PASS% | docker login -u %DOCKERHUB_USER% --password-stdin"'
                        
                        bat '"C:\\Program Files\\Git\\usr\\bin\\ssh.exe" -i "%SSH_KEY_FILE%" -o StrictHostKeyChecking=no %EC2_USER%@%EC2_HOST% "docker push %DOCKERHUB_USERNAME%/%BACKEND_IMAGE%:%IMAGE_TAG% && docker push %DOCKERHUB_USERNAME%/%BACKEND_IMAGE%:latest"'
                        
                        bat '"C:\\Program Files\\Git\\usr\\bin\\ssh.exe" -i "%SSH_KEY_FILE%" -o StrictHostKeyChecking=no %EC2_USER%@%EC2_HOST% "docker push %DOCKERHUB_USERNAME%/%FRONTEND_IMAGE%:%IMAGE_TAG% && docker push %DOCKERHUB_USERNAME%/%FRONTEND_IMAGE%:latest"'
                    }
                }
            }
        }

        stage('Login & Push images') {
            steps {
                echo 'Images already pushed in previous stage'
            }
        }

        stage('Deploy on EC2 via SSH') {
            steps {
                script {
                    withCredentials([
                        sshUserPrivateKey(credentialsId: 'ec2-ssh-key', keyFileVariable: 'SSH_KEY_FILE'),
                        string(credentialsId: 'mongo-url', variable: 'MONGO_URL')
                    ]) {
                        // Upload docker-compose file
                        bat '"C:\\Program Files\\Git\\usr\\bin\\scp.exe" -i "%SSH_KEY_FILE%" -o StrictHostKeyChecking=no Deploy/docker-compose.yml %EC2_USER%@%EC2_HOST%:/home/%EC2_USER%/docker-compose.yml'
                        // Create .env on remote with required vars
                        bat '"C:\\Program Files\\Git\\usr\\bin\\ssh.exe" -i "%SSH_KEY_FILE%" -o StrictHostKeyChecking=no %EC2_USER%@%EC2_HOST% "echo DOCKERHUB_USERNAME=%DOCKERHUB_USERNAME% > ~/devopsians.env && echo MONGO_URL=%MONGO_URL% >> ~/devopsians.env && echo FRONTEND_URL=%FRONTEND_URL% >> ~/devopsians.env"'

                        // Pull latest images and restart stack
                        bat '"C:\\Program Files\\Git\\usr\\bin\\ssh.exe" -i "%SSH_KEY_FILE%" -o StrictHostKeyChecking=no %EC2_USER%@%EC2_HOST% "export $(cat ~/devopsians.env | xargs); docker pull %DOCKERHUB_USERNAME%/%BACKEND_IMAGE%:latest && docker pull %DOCKERHUB_USERNAME%/%FRONTEND_IMAGE%:latest && docker compose -f ~/docker-compose.yml down || true && docker compose -f ~/docker-compose.yml up -d"'
                        
                        // Cleanup build directory
                        bat '"C:\\Program Files\\Git\\usr\\bin\\ssh.exe" -i "%SSH_KEY_FILE%" -o StrictHostKeyChecking=no %EC2_USER%@%EC2_HOST% "rm -rf /home/%EC2_USER%/devopsians-build"'
                    }
                }
            }
        }
    }

    post {
        success {
            echo "Deployed: http://${EC2_HOST}"
        }
        cleanup {
            script {
                try {
                    if (isUnix()) {
                        sh 'docker logout || true'
                    } else {
                        bat 'echo "Local cleanup skipped - no Docker on Jenkins"'
                    }
                } catch (Exception e) {
                    echo "Cleanup warning: ${e.getMessage()}"
                }
            }
        }
    }
}