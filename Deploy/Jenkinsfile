pipeline {
    agent any

    environment {
        DOCKERHUB_CREDENTIALS = credentials('dockerhub-credentials')
        DOCKERHUB_USERNAME = 'mohamedtarek123'
        BACKEND_IMAGE = 'devopsians-backend'
        FRONTEND_IMAGE = 'devopsians-frontend'
        IMAGE_TAG = "${BUILD_NUMBER}"
        EC2_HOST = '56.228.11.117'
        EC2_USER = 'ubuntu'
        SSH_KEY = credentials('ec2-ssh-key')
        MONGO_URL = credentials('mongo-url')
        FRONTEND_URL = "http://${EC2_HOST}"
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Build images on EC2') {
            steps {
                script {
                    withCredentials([
                        sshUserPrivateKey(credentialsId: 'ec2-ssh-key', keyFileVariable: 'SSH_KEY_FILE'),
                        usernamePassword(credentialsId: 'dockerhub-credentials', usernameVariable: 'DOCKERHUB_USER', passwordVariable: 'DOCKERHUB_PASS')
                    ]) {
                        // Clean and prepare build directory on EC2 (explicit ubuntu path and ownership)
                        bat '"C:\\Program Files\\Git\\usr\\bin\\ssh.exe" -i "%SSH_KEY_FILE%" -o StrictHostKeyChecking=no %EC2_USER%@%EC2_HOST% "sudo rm -rf /home/ubuntu/devopsians-build || true; mkdir -p /home/ubuntu/devopsians-build; sudo chown ubuntu:ubuntu /home/ubuntu/devopsians-build"'
                        // Copy only necessary project files (exclude .git by not copying it): backend/, frontend/, and docker-compose.yml
                        bat '"C:\\Program Files\\Git\\usr\\bin\\scp.exe" -i "%SSH_KEY_FILE%" -o StrictHostKeyChecking=no -r backend frontend Deploy/docker-compose.yml %EC2_USER%@%EC2_HOST%:/home/%EC2_USER%/devopsians-build/'
                        
                        // Build images on EC2
                        bat '"C:\\Program Files\\Git\\usr\\bin\\ssh.exe" -i "%SSH_KEY_FILE%" -o StrictHostKeyChecking=no %EC2_USER%@%EC2_HOST% "cd /home/%EC2_USER%/devopsians-build && docker build --no-cache -t %DOCKERHUB_USERNAME%/%BACKEND_IMAGE%:%IMAGE_TAG% -f backend/Dockerfile . && docker tag %DOCKERHUB_USERNAME%/%BACKEND_IMAGE%:%IMAGE_TAG% %DOCKERHUB_USERNAME%/%BACKEND_IMAGE%:latest"'
                        
                        bat '"C:\\Program Files\\Git\\usr\\bin\\ssh.exe" -i "%SSH_KEY_FILE%" -o StrictHostKeyChecking=no %EC2_USER%@%EC2_HOST% "cd /home/%EC2_USER%/devopsians-build && docker build --no-cache -t %DOCKERHUB_USERNAME%/%FRONTEND_IMAGE%:%IMAGE_TAG% -f frontend/Dockerfile --build-arg VITE_API_URL=http://%EC2_HOST%:3030 . && docker tag %DOCKERHUB_USERNAME%/%FRONTEND_IMAGE%:%IMAGE_TAG% %DOCKERHUB_USERNAME%/%FRONTEND_IMAGE%:latest"'
                        
                        // Login and push from EC2
                        bat '"C:\\Program Files\\Git\\usr\\bin\\ssh.exe" -i "%SSH_KEY_FILE%" -o StrictHostKeyChecking=no %EC2_USER%@%EC2_HOST% "echo %DOCKERHUB_PASS% | docker login -u %DOCKERHUB_USER% --password-stdin"'
                        
                        bat '"C:\\Program Files\\Git\\usr\\bin\\ssh.exe" -i "%SSH_KEY_FILE%" -o StrictHostKeyChecking=no %EC2_USER%@%EC2_HOST% "docker push %DOCKERHUB_USERNAME%/%BACKEND_IMAGE%:%IMAGE_TAG% && docker push %DOCKERHUB_USERNAME%/%BACKEND_IMAGE%:latest"'
                        
                        bat '"C:\\Program Files\\Git\\usr\\bin\\ssh.exe" -i "%SSH_KEY_FILE%" -o StrictHostKeyChecking=no %EC2_USER%@%EC2_HOST% "docker push %DOCKERHUB_USERNAME%/%FRONTEND_IMAGE%:%IMAGE_TAG% && docker push %DOCKERHUB_USERNAME%/%FRONTEND_IMAGE%:latest"'
                    }
                }
            }
        }

        stage('Login & Push images') {
            steps {
                echo 'Images already pushed in previous stage'
            }
        }

        stage('Deploy on EC2 via SSH') {
            steps {
                script {
                    withCredentials([
                        sshUserPrivateKey(credentialsId: 'ec2-ssh-key', keyFileVariable: 'SSH_KEY_FILE'),
                        string(credentialsId: 'mongo-url', variable: 'MONGO_URL')
                    ]) {
                        // Upload docker-compose file
                        bat '"C:\\Program Files\\Git\\usr\\bin\\scp.exe" -i "%SSH_KEY_FILE%" -o StrictHostKeyChecking=no Deploy/docker-compose.yml %EC2_USER%@%EC2_HOST%:/home/%EC2_USER%/docker-compose.yml'
                        // Stop any containers using port 80 and 3030 before deploying
                        bat '"C:\\Program Files\\Git\\usr\\bin\\ssh.exe" -i "%SSH_KEY_FILE%" -o StrictHostKeyChecking=no %EC2_USER%@%EC2_HOST% "sudo docker ps -q --filter \\"publish=80\\" | xargs -r sudo docker stop"'
                        bat '"C:\\Program Files\\Git\\usr\\bin\\ssh.exe" -i "%SSH_KEY_FILE%" -o StrictHostKeyChecking=no %EC2_USER%@%EC2_HOST% "sudo docker ps -q --filter \\"publish=3030\\" | xargs -r sudo docker stop"'
                        
                        // Create setup_env.sh script locally on Windows Jenkins
                        bat """
                        echo #!/bin/bash > setup_env.sh
                        echo echo DOCKERHUB_USERNAME=%DOCKERHUB_USERNAME% ^> ~/devopsians.env >> setup_env.sh
                        echo echo MONGO_URL='%MONGO_URL%' ^>^> ~/devopsians.env >> setup_env.sh
                        echo echo FRONTEND_URL=http://%EC2_HOST% ^>^> ~/devopsians.env >> setup_env.sh
                        echo echo NODE_ENV=production ^>^> ~/devopsians.env >> setup_env.sh
                        echo echo PORT=3030 ^>^> ~/devopsians.env >> setup_env.sh
                        """
                        
                        // Copy setup script to EC2 and execute it
                        bat '"C:\\Program Files\\Git\\usr\\bin\\scp.exe" -i "%SSH_KEY_FILE%" -o StrictHostKeyChecking=no setup_env.sh %EC2_USER%@%EC2_HOST%:/home/%EC2_USER%/setup_env.sh'
                        bat '"C:\\Program Files\\Git\\usr\\bin\\ssh.exe" -i "%SSH_KEY_FILE%" -o StrictHostKeyChecking=no %EC2_USER%@%EC2_HOST% "chmod +x ~/setup_env.sh && ~/setup_env.sh && rm ~/setup_env.sh"'

                        // Pull latest images and restart stack
                        bat '"C:\\Program Files\\Git\\usr\\bin\\ssh.exe" -i "%SSH_KEY_FILE%" -o StrictHostKeyChecking=no %EC2_USER%@%EC2_HOST% "export $(cat ~/devopsians.env | xargs); docker pull %DOCKERHUB_USERNAME%/%BACKEND_IMAGE%:latest && docker pull %DOCKERHUB_USERNAME%/%FRONTEND_IMAGE%:latest && docker compose -f ~/docker-compose.yml down || true && docker compose -f ~/docker-compose.yml up -d"'
                        
                        // Wait for containers to start and check health
                        bat '"C:\\Program Files\\Git\\usr\\bin\\ssh.exe" -i "%SSH_KEY_FILE%" -o StrictHostKeyChecking=no %EC2_USER%@%EC2_HOST% "sleep 10"'
                        
                        // Check if containers are running and print logs if they fail
                        script {
                            def containerCheck = bat(
                                script: '"C:\\Program Files\\Git\\usr\\bin\\ssh.exe" -i "%SSH_KEY_FILE%" -o StrictHostKeyChecking=no %EC2_USER%@%EC2_HOST% "docker ps --format \\"table {{.Names}}\\t{{.Status}}\\" | grep -E \\"devopsians-(backend|frontend)\\""',
                                returnStatus: true
                            )
                            
                            if (containerCheck != 0) {
                                echo "WARNING: Some containers may not be running properly. Checking logs..."
                                bat '"C:\\Program Files\\Git\\usr\\bin\\ssh.exe" -i "%SSH_KEY_FILE%" -o StrictHostKeyChecking=no %EC2_USER%@%EC2_HOST% "echo \\"=== Backend Container Logs ===\\" && docker logs devopsians-backend --tail 50 || echo \\"Backend container not found\\""'
                                bat '"C:\\Program Files\\Git\\usr\\bin\\ssh.exe" -i "%SSH_KEY_FILE%" -o StrictHostKeyChecking=no %EC2_USER%@%EC2_HOST% "echo \\"=== Frontend Container Logs ===\\" && docker logs devopsians-frontend --tail 50 || echo \\"Frontend container not found\\""'
                            } else {
                                echo "✅ All containers are running successfully!"
                            }
                        }
                        
                        // Final health check for frontend
                        script {
                            def healthCheck = bat(
                                script: '"C:\\Program Files\\Git\\usr\\bin\\ssh.exe" -i "%SSH_KEY_FILE%" -o StrictHostKeyChecking=no %EC2_USER%@%EC2_HOST% "curl -f http://localhost:80 || curl -f http://localhost"',
                                returnStatus: true
                            )
                            
                            if (healthCheck == 0) {
                                echo "✅ Frontend is responding at http://${EC2_HOST}"
                            } else {
                                echo "⚠️ Frontend health check failed. Check container logs above."
                            }
                        }
                        
                        // Cleanup build directory
                        bat '"C:\\Program Files\\Git\\usr\\bin\\ssh.exe" -i "%SSH_KEY_FILE%" -o StrictHostKeyChecking=no %EC2_USER%@%EC2_HOST% "rm -rf /home/%EC2_USER%/devopsians-build"'
                    }
                }
            }
        }
    }

    post {
        success {
            echo "Deployed: http://${EC2_HOST}"
        }
        cleanup {
            script {
                try {
                    if (isUnix()) {
                        sh 'docker logout || true'
                    } else {
                        bat 'echo "Local cleanup skipped - no Docker on Jenkins"'
                    }
                } catch (Exception e) {
                    echo "Cleanup warning: ${e.getMessage()}"
                }
            }
        }
    }
}